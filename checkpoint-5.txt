1. Write out a generic SELECT statement.
A:
SELECT <columns> FROM <tables> WHERE <conditions>;

SELECT title, price FROM pcgames WHERE publisher='Activision' AND year >= 2006;

2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.
A:
SELenium FOR WEb browsers
https://www.seleniumhq.org/

3. Given this dogs table, write queries to select the following pieces of data:

Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

* Display the name, gender, and age of all dogs that are part Labrador.
A: 
SELECT "name", "gender", "age" FROM dogs WHERE "breed" LIKE %labrador%;

* Display the ids of all dogs that are under 1 year old.
A:
SELECT "id" FROM dogs WHERE "age" < 1;

* Display the name and age of all dogs that are female and over 35lbs.
A:
SELECT "name", "age" FROM dogs WHERE "gender"='F' AND weight > 35;

* Display all of the information about all dogs that are not Shepherd mixes.
A:
SELECT * FROM dogs WHERE "breed" NOT LIKE '%shepherd%';

* Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
A:
SELECT "id", "age", "weight", "breed" FROM dogs WHERE "weight" > 60 OR "breed" = 'great dane';

4. Given this cats table, what records are returned from these queries?

* SELECT name, adoption_date FROM cats;
A:
the name and adoption date for every cat on the table.

* SELECT name, age FROM cats;
A: the name and age for very cat on the table

5. From the cats table, write queries to select the following pieces of data.

* Display all the information about all of the available cats.
A:
SELECT * FROM cats;

* Display the name and sex of all cats who are 7 years old.
A:
SELECT "name", "gender" FROM cats WHERE "age" = 7;

* Find all of the names of the cats, so you don’t choose duplicate names for new cats.
A:
SELECT "name" FROM cats;

6. List each comparison operator and explain when you would use it. Include a real world example for each.
>
Greater than, used when comparing 2 values, Example: selecting items with a price above a certain value.

<
Less than, used when comparing 2 values. Example: selecting emplyees who have been with the company less than a certain number of years.

=
Equal to, used when comparing 2 values: Example: selecting persons with a certain last name.

<=
Less than or equal to, used when comparing 2 values: Example: selecting vehicles that have been in service up to 5 years.

>=
Greater than or equal to, used when comparing 2 values Example: selecting payments that are overdue 90 days or more.

!=
Not equal to, used when comparing 2 values: Example: selecting every client that is not the main client.

<>
Greater than or less than, used when comparing 2 values. Example: select all products costing more than or less than 20 dollars. similar to not equal to.

LIKE
Used to pattern match a string, example: "input LIKE 'cat'". Example: selecting all books with the phrase 'for dummies' in the title.

BETWEEN
Implemented like "a BETWEEN x AND y", this is equivalent to "a >= x AND a <= y". Example: selecting all students between the ages of 20 and 25

DISTINCT
Returns only distinct or non duplicate values. Example: Selecting countries we have offices in.

7. From the cats table, what data is returned from these queries?
* SELECT "name" FROM cats WHERE "gender" = ‘F’;
A: The name of all female cats. Seashell and Nala.

* SELECT "name" FROM cats WHERE "age" <> 3;
A:The name of all cats whose age is greater than or less than 3. All except Azul.


* SELECT "id" FROM cats WHERE "name" != ‘Mushi’ AND "gender" = ‘M’
A: The id of all male cats not named Mushi. 3 and 4.