1. How do you find related data held in two separate data tables?
A:
by using a foreign keys on one table to link to the primary keys of another.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.
A:
INNER JOIN: displays the rows that are common to both tables. Example: Display name and time for all party of four reservations.

LEFT OUTER JOIN : Displays all rows from the left table and all matching rows from the right table. EXAMPLE: Display name of all reservations and time for party of four reservations.

RIGHT OUTER TABLE: displays all rows from the right table and matching row from the left table. EXAMPlE: Display time for all reservation and name for party of four reservations

3. Define primary key and foreign key. Give a real-world example for each.
A:
 The primary key consists of one or more columns whose data contained within is used to uniquely identify each row in the table. Example: id number or serial number

A foreign key is a set of one or more columns in a table that refers to the primary key in another table. 

4. Define aliasing.
A:
Aliasing is used to give a table, or a column in a table, a temporary name. Aliases are often used to make column names more readable. An alias only exists for the duration of the query.

5. Change this query so that you are using aliasing:
SELECT professor.name, compensation.salary,
compensation.vacation_days FROM professor JOIN
compensation ON professor.id =
compensation.professor_id;

A:
SELECT p.name, c.salary, c. vacation_days FROM professor AS p JOIN compensation AS c ON p.id = c.professor_id;


6. Why would you use a NATURAL JOIN? Give a real-world example.

A: When the associated tables have one or more pairs of identically named columns of the same datatype.
EXAMPLE: Joining a table of cable custumers with a table of internet customers to display customers who have both services.


7. Using this Employee schema and data, write queries to find the following information:

* List all employees and all shifts.
A:
SELECT * FROM employees FULL OUTER JOIN shifts ON employees.id = shifts.id;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:


* Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
A:
SELECT * FROM volunteers LEFT OUTER JOIN dogs ON dogs.id = volunteers.foster_dog_id;


*The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
A:
SELECT name, first_name, last_name, date FROM cat_adoptions JOIN cats ON cat_adoptions.cat_id = cats.id JOIN adopters ON cat_adoptions.adopter_id = adopters.id WHERE cat_adoptions.date >= CURRENT_DATE - INTERVAL '30 DAYS';

*Create a list of adopters who have not yet chosen a dog to adopt.
A:
SELECT * FROM adopters FULL OUTER JOIN dog_adoptions ON dog_adoptions.adopter_id = adopters.id WHERE dog_adoptions.adopter_id IS NULL;


*Lists of all cats and all dogs who have not been adopted.
A:
SELECT name FROM cats LEFT JOIN cat_adoptions ON cats.id = cat_adoptions.cat_id WHERE cat_adoptions.cat_id IS NULL;
SELECT name FROM dogs LEFT JOIN dog_adoptions ON dogs.id = dog_adoptions.dog_id WHERE dog_adoptions.dog_id IS NULL;

* The name of the person who adopted Rosco.
A:
SELECT first_name, last_name FROM adopters JOIN dog_adoptions ON adopters.id = dog_adoptions.adopter_id WHERE dog_adoptions.dog_id = 10007;


9. Using this Library schema and data, write queries applying the following scenarios and include the results:

* To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".
A:
SELECT name, patrons.id FROM patrons JOIN holds ON patrons.id = holds.patron_id JOIN books ON holds.isbn = books.isbn WHERE books.title = 'Advanced Potion-Making' ORDER BY patrons.id;

*List all of the library patrons. If they have one or more books checked out, list the books with the patrons.
A:
SELECT patrons.name, books.title 
FROM transactions 
JOIN books ON (books.isbn = transactions.isbn 
AND transactions.checked_out_date IS NOT NULL 
AND transactions.checked_in_date IS NULL)
RIGHT OUTER JOIN patrons ON transactions.patron_id = patrons.id ;